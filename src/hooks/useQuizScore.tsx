
import { useState } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { useAuth } from '@/contexts/AuthContext';
import { useToast } from '@/hooks/use-toast';

export const useQuizScore = () => {
  const [saving, setSaving] = useState(false);
  const { user, refreshProfile } = useAuth();
  const { toast } = useToast();

  const saveQuizScore = async (subject: string, score: number, totalQuestions: number, timeSpent: number) => {
    if (!user) {
      console.error('‚ùå Usu√°rio n√£o autenticado');
      toast({
        title: "Erro de autentica√ß√£o",
        description: "Voc√™ precisa estar logado para salvar pontua√ß√µes.",
        variant: "destructive"
      });
      return false;
    }

    try {
      setSaving(true);
      
      console.log('üéØ Salvando pontua√ß√£o do quiz:', { 
        user_id: user.id, 
        subject, 
        score, 
        totalQuestions, 
        timeSpent 
      });

      // Salvar pontua√ß√£o com tratamento de erro melhorado
      const { data: quizData, error: quizError } = await supabase
        .from('quiz_scores')
        .insert({
          user_id: user.id,
          subject,
          score,
          total_questions: totalQuestions,
          time_spent: timeSpent
        })
        .select()
        .single();

      if (quizError) {
        console.error('‚ùå Erro ao salvar pontua√ß√£o:', quizError);
        
        // Tratamento espec√≠fico para diferentes tipos de erro
        if (quizError.code === '23505') {
          toast({
            title: "Dados duplicados",
            description: "Esta pontua√ß√£o j√° foi salva anteriormente.",
            variant: "destructive"
          });
        } else if (quizError.code === '42501') {
          toast({
            title: "Erro de permiss√£o",
            description: "Voc√™ n√£o tem permiss√£o para salvar pontua√ß√µes.",
            variant: "destructive"
          });
        } else {
          toast({
            title: "Erro ao salvar pontua√ß√£o",
            description: "N√£o foi poss√≠vel salvar sua pontua√ß√£o. Tente novamente.",
            variant: "destructive"
          });
        }
        return false;
      }

      console.log('‚úÖ Pontua√ß√£o salva com sucesso:', quizData);
      
      // Tentar atualizar o perfil, mas n√£o falhar se der erro
      try {
        await refreshProfile();
        console.log('‚úÖ Perfil atualizado com sucesso');
      } catch (refreshError) {
        console.error('‚ö†Ô∏è Erro ao atualizar perfil (n√£o cr√≠tico):', refreshError);
      }
      
      toast({
        title: "Quiz conclu√≠do!",
        description: `Parab√©ns! Voc√™ ganhou ${score} pontos!`,
      });

      return true;

    } catch (error) {
      console.error('‚ùå Erro inesperado ao salvar pontua√ß√£o:', error);
      toast({
        title: "Erro inesperado",
        description: "Ocorreu um erro ao salvar sua pontua√ß√£o.",
        variant: "destructive"
      });
      return false;
    } finally {
      setSaving(false);
    }
  };

  return { saveQuizScore, saving };
};
