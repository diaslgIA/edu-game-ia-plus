
-- Criar tabela de guildas
CREATE TABLE public.guilds (
  id uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
  name text NOT NULL,
  description text,
  owner_id uuid REFERENCES public.profiles(id) NOT NULL,
  total_points integer DEFAULT 0,
  is_public boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now()
);

-- Criar tabela de membros das guildas
CREATE TABLE public.guild_members (
  guild_id uuid REFERENCES public.guilds(id) ON DELETE CASCADE,
  profile_id uuid REFERENCES public.profiles(id) ON DELETE CASCADE,
  role text DEFAULT 'membro',
  joined_at timestamp with time zone DEFAULT now(),
  PRIMARY KEY (guild_id, profile_id)
);

-- Criar tabela de mensagens do chat das guildas
CREATE TABLE public.guild_chat_messages (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  guild_id uuid REFERENCES public.guilds(id) ON DELETE CASCADE,
  sender_id uuid REFERENCES public.profiles(id) ON DELETE CASCADE,
  content text NOT NULL,
  created_at timestamp with time zone DEFAULT now()
);

-- Criar tabela do mural de dúvidas das guildas
CREATE TABLE public.guild_mural_posts (
  id uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
  guild_id uuid REFERENCES public.guilds(id) ON DELETE CASCADE,
  author_id uuid REFERENCES public.profiles(id) ON DELETE CASCADE,
  title text NOT NULL,
  body text NOT NULL,
  is_answered boolean DEFAULT false,
  created_at timestamp with time zone DEFAULT now()
);

-- Criar tabela da biblioteca de materiais das guildas
CREATE TABLE public.guild_library_files (
  id uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
  guild_id uuid REFERENCES public.guilds(id) ON DELETE CASCADE,
  uploader_id uuid REFERENCES public.profiles(id) ON DELETE CASCADE,
  file_name text NOT NULL,
  description text,
  storage_path text NOT NULL,
  created_at timestamp with time zone DEFAULT now()
);

-- Habilitar Row Level Security
ALTER TABLE public.guilds ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.guild_members ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.guild_chat_messages ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.guild_mural_posts ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.guild_library_files ENABLE ROW LEVEL SECURITY;

-- Políticas para guildas (membros podem ver guildas públicas ou suas próprias guildas)
CREATE POLICY "Users can view public guilds or their own guilds" ON public.guilds
  FOR SELECT USING (
    is_public = true OR 
    owner_id = auth.uid() OR 
    EXISTS (
      SELECT 1 FROM public.guild_members 
      WHERE guild_id = guilds.id AND profile_id = auth.uid()
    )
  );

CREATE POLICY "Users can create guilds" ON public.guilds
  FOR INSERT WITH CHECK (auth.uid() = owner_id);

CREATE POLICY "Guild owners can update their guilds" ON public.guilds
  FOR UPDATE USING (auth.uid() = owner_id);

-- Políticas para membros das guildas
CREATE POLICY "Users can view guild members if they are members" ON public.guild_members
  FOR SELECT USING (
    EXISTS (
      SELECT 1 FROM public.guild_members gm 
      WHERE gm.guild_id = guild_members.guild_id AND gm.profile_id = auth.uid()
    )
  );

CREATE POLICY "Guild owners can manage members" ON public.guild_members
  FOR ALL USING (
    EXISTS (
      SELECT 1 FROM public.guilds 
      WHERE id = guild_members.guild_id AND owner_id = auth.uid()
    )
  );

CREATE POLICY "Users can join guilds" ON public.guild_members
  FOR INSERT WITH CHECK (auth.uid() = profile_id);

-- Políticas para mensagens do chat
CREATE POLICY "Guild members can view chat messages" ON public.guild_chat_messages
  FOR SELECT USING (
    EXISTS (
      SELECT 1 FROM public.guild_members 
      WHERE guild_id = guild_chat_messages.guild_id AND profile_id = auth.uid()
    )
  );

CREATE POLICY "Guild members can send messages" ON public.guild_chat_messages
  FOR INSERT WITH CHECK (
    auth.uid() = sender_id AND
    EXISTS (
      SELECT 1 FROM public.guild_members 
      WHERE guild_id = guild_chat_messages.guild_id AND profile_id = auth.uid()
    )
  );

-- Políticas para posts do mural
CREATE POLICY "Guild members can view mural posts" ON public.guild_mural_posts
  FOR SELECT USING (
    EXISTS (
      SELECT 1 FROM public.guild_members 
      WHERE guild_id = guild_mural_posts.guild_id AND profile_id = auth.uid()
    )
  );

CREATE POLICY "Guild members can create posts" ON public.guild_mural_posts
  FOR INSERT WITH CHECK (
    auth.uid() = author_id AND
    EXISTS (
      SELECT 1 FROM public.guild_members 
      WHERE guild_id = guild_mural_posts.guild_id AND profile_id = auth.uid()
    )
  );

CREATE POLICY "Post authors can update their posts" ON public.guild_mural_posts
  FOR UPDATE USING (auth.uid() = author_id);

-- Políticas para arquivos da biblioteca
CREATE POLICY "Guild members can view library files" ON public.guild_library_files
  FOR SELECT USING (
    EXISTS (
      SELECT 1 FROM public.guild_members 
      WHERE guild_id = guild_library_files.guild_id AND profile_id = auth.uid()
    )
  );

CREATE POLICY "Guild members can upload files" ON public.guild_library_files
  FOR INSERT WITH CHECK (
    auth.uid() = uploader_id AND
    EXISTS (
      SELECT 1 FROM public.guild_members 
      WHERE guild_id = guild_library_files.guild_id AND profile_id = auth.uid()
    )
  );

-- Habilitar realtime para mensagens do chat
ALTER TABLE public.guild_chat_messages REPLICA IDENTITY FULL;
ALTER PUBLICATION supabase_realtime ADD TABLE public.guild_chat_messages;

-- Criar função para atualizar pontos da guilda quando um membro ganha pontos
CREATE OR REPLACE FUNCTION update_guild_points_after_member_quiz()
RETURNS trigger
LANGUAGE plpgsql
AS $$
BEGIN
  -- Atualizar pontos de todas as guildas do usuário
  UPDATE public.guilds 
  SET total_points = (
    SELECT COALESCE(SUM(p.points), 0)
    FROM public.guild_members gm
    JOIN public.profiles p ON p.id = gm.profile_id
    WHERE gm.guild_id = guilds.id
  )
  WHERE id IN (
    SELECT guild_id 
    FROM public.guild_members 
    WHERE profile_id = NEW.user_id
  );
  
  RETURN NEW;
END;
$$;

-- Criar trigger para atualizar pontos das guildas após quiz
CREATE TRIGGER update_guild_points_trigger
  AFTER INSERT ON public.quiz_scores
  FOR EACH ROW
  EXECUTE FUNCTION update_guild_points_after_member_quiz();
